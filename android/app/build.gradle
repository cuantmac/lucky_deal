apply plugin: "com.android.application"


import org.apache.tools.ant.taskdefs.condition.Os
/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://facebook.github.io/react-native/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    enableHermes: true,  // clean and rebuild if changing
    bundleInDebug: true,
]


apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false)

def buildId = project.properties.get("buildId")
def branchName = project.properties.get("branchName")

def debugHttpHost = null
try {
    def localProps = new Properties()
    localProps.load(rootProject.file("local.properties").newDataInputStream())
    debugHttpHost = localProps.getProperty("debug.http.host")
} catch (Throwable ignored) {
}
android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.luckydeal"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
        flavorDimensions "channel"
        buildConfigField "boolean", "DEV_MODE", "Boolean.parseBoolean(\"true\")"
        buildConfigField "int", "BUILD_ID", "${buildId != null ? buildId : 0}"
        buildConfigField "int", "BUNDLE_CODE", "${rootProject.ext.devBundleCode}"
        buildConfigField "String", "DEBUG_HTTP_HOST", "\"${debugHttpHost != null ? debugHttpHost : ""}\""
        resValue "string", "app_name", "Lucky Deal"
        resConfigs "en"
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "arm64-v8a"
        }
    }
    signingConfigs {
//        debug {
//            storeFile file('debug.keystore')
//            storePassword 'android'
//            keyAlias 'androiddebugkey'
//            keyPassword 'android'
//        }
        release {
            storeFile file('../luckydeal.keystore')
            storePassword 'luckydeal'
            keyAlias 'default'
            keyPassword 'luckydeal'
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources false //加密需要，不能开启
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            signingConfig android.buildTypes.release.signingConfig
        }
    }
    flavorDimensions "channel"
    productFlavors {
        gp {
            signingConfig signingConfigs.release
            dimension "channel"
            buildConfigField "boolean", "DEV_MODE", "Boolean.parseBoolean(\"false\")"
            buildConfigField "int", "BUNDLE_CODE", "${rootProject.ext.gpBundleCode}"
            resValue "string", "app_name", "Gesleben"
            resValue "string", "facebook_app_id", "523374555026501"
            resValue "string", "fb_login_protocol_scheme", "fb523374555026501"
            resValue "string", "facebook_provider", "com.facebook.app.FacebookContentProvider523374555026501"
            manifestPlaceholders = [
                    TestMode : false,
                    BRANCH_DEFAULT_APP_LINK: 'gesleben.app.link',
                    BRANCH_ALTERNATE_APP_LINK: 'luckydeal-alternate.app.link'
            ]
        }
        dev {
            signingConfig signingConfigs.release
            dimension "channel"
            buildConfigField "boolean", "DEV_MODE", "Boolean.parseBoolean(\"true\")" //FIXME 测试环境无法使用Google Play billing
            buildConfigField "int", "BUNDLE_CODE", "${rootProject.ext.devBundleCode}"
            resValue "string", "app_name", "Gesleben dev"
            resValue "string", "facebook_app_id", "523374555026501"
            resValue "string", "fb_login_protocol_scheme", "fb523374555026501"
            resValue "string", "facebook_provider", "com.facebook.app.FacebookContentProvider523374555026501"
            manifestPlaceholders = [
                    TestMode : true,
                    BRANCH_DEFAULT_APP_LINK: 'ay886.test-app.link',
                    BRANCH_ALTERNATE_APP_LINK: 'ay886-alternate.test-app.link'
            ]
        }
    }

    packagingOptions {
      //  exclude '**/libhermes-inspector.so'
      //  exclude '**/libhermes-executor-debug.so'
      //  exclude '**/libhermes-executor-release.so'

        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
    }

    repositories {
        flatDir {
            dirs 'libs', '../common/libs'
        }
    }
}

dependencies {
    //debugImplementation files('libs/asiabillpay-test.aar', 'libs/lib_common-test.aar')
    implementation  files('libs/asiabillpay-product.aar', 'libs/lib_common-product.aar')
    //implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation project(':common')
    implementation project(path: ':ykfsdk')
    //implementation project(':itfcmlib')
    implementation 'com.android.installreferrer:installreferrer:1.1.2'

    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
    implementation "com.google.android.gms:play-services-wallet:18.1.2"
    implementation "com.google.android.gms:play-services-ads-identifier:17.0.0@aar"
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'com.tencent.bugly:crashreport:3.1.0'
    implementation 'com.tencent.bugly:nativecrashreport:3.7.1'
    implementation 'com.appsflyer:af-android-sdk:5.2.0'
    implementation 'com.facebook.android:facebook-applinks:5.15.3'
    api 'com.tencent.sonic:sdk:3.1.0'
    implementation ('com.facebook.android:facebook-share:5.15.3@aar'){
        transitive = true
    }
    implementation('com.twitter.sdk.android:twitter:3.3.0@aar') {
        transitive = true
    }
    // implementation project(':@sentry_react-native')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

task dist(group: 'dist') {
    tasks.dist.dependsOn("assembleRelease")
    doLast {
        android.applicationVariants.all { variant ->
            if ("release" == variant.buildType.name) {
                def baseName = "app-" + variant.flavorName + "-release"
                def fileName = "build/outputs/apk/" + variant.flavorName + "/release/" + baseName + ".apk"
                def releaseTime = new Date().format("yyyyMMdd-HHmm", TimeZone.getTimeZone("GMT+8"))
                def releaseName = "luckydeal_" + variant.flavorName + "_" + variant.versionName + "_" + (buildId != null ? "Build-" + buildId : releaseTime) + "_" + branchName + ".apk"
                def distDir = file('../dist/')
                if (!distDir.exists()) {
                    distDir.mkdirs()
                }
                file(fileName).renameTo(file('../dist/' + releaseName))
                if (buildId != null) {
                    exec {
                        def reactRoot = "../.."
                        workingDir reactRoot
                        environment("SENTRY_PROPERTIES", "$workingDir/android/sentry.properties")
                        def args = [
                                "$workingDir/node_modules/@sentry/cli/bin/sentry-cli",
                                "react-native",
                                "gradle",
                                "--bundle",
                                "$workingDir/android/app/build/generated/assets/react/${variant.flavorName}/release/index.android.bundle",
                                "--sourcemap",
                                "$workingDir/android/app/build/generated/sourcemaps/react/${variant.flavorName}/release/index.android.bundle.map",
                                "--release",
                                "${variant.applicationId}@${variant.versionName}+${variant.versionCode}",
                                "--dist",
                                variant.versionCode
                        ]
                        def osCompatibility = Os.isFamily(Os.FAMILY_WINDOWS) ? ['cmd', '/c', 'node'] : []
                        commandLine(*osCompatibility, *args)
                    }
                }
            }
        }
    }
}
apply plugin: 'com.google.gms.google-services'
